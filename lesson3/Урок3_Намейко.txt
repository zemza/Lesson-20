Beet Seed


№
	Назва методології
	Сильні сторони
	Слабкі сторони
	Для якої галузі доцільна
	1
	Waterfall
	Детальне документування всіх процесів на кожному етапі (зручно, наприклад, якщо на проект прийде нова людина, вона швидко зрозуміє, що вже було зроблено);


чітке планування витрат, а також строків виконання;


прозорість всіх процесів для замовника, на будь-якому етапі він може оцінити прогрес.
	Необхідність затвердити всі вимоги ще перед початком першого етапу. Це довгий і кропіткий процес, важко все продумати наперед;


якщо треба внести якісь зміни у вимоги, а робота вже йде, то команді прийдеться повертатись на перший етап;


те саме, якщо знайдена помилка. Повернення - це втрачений час та гроші.




	Для воєнних проектів або, наприклад, для розробки медичного порталу, систем безпеки тощо.
	2
	Scrum
	Швидший результат: коли процес поділений на спринти, люди в команді бачать проміжний результат своєї роботи, а це мотивує;


на кожному етапі клієнт також бачить результат роботи і це зручно, адже при необхідності можна швидко пофіксити або внести зміни;


команда працює злагоджено, також завдяки дейлі мітам і ретроспективі можна швидко щось змінити або доробити.
	Успіх команди залежить не тільки від скілів, а ще багато в чому від скрам-майстра;


необхідність часто спілкуватися із замовником (втрата часу і може нервів);


не підходить до масштабних проектів, краще для маленьких чи середніх.[a]
	Наприклад, розробка мобільних додатків (необхідність часто вносити правки, адаптувати під різні девайси тощо).
	3
	Canban[b]
	Залученість у процес всіх членів команди. Якщо хтось не справляється, допомагають інші, сумісні спеціалісти;


прозорість процесів, завдяки частим зустрічам команди.[c]
	Немає чітких дедлайнів, адже кожен працює в своєму темпі;[d][e]


потрібен високий рівень дисципліни і самоорганізованості;


через постійний конвеєр задач людина може втратити мотивацію.
	Там, де і скрам
	



Beet Sprout


Чому з’явився Agile-маніфест?
Думаю, що Agile з’явився як противага громіздкому, і багато в чому недосконалому методу Waterfall (та іншим негнучким методикам). І це закономірно, оскільки світ IT розвивається дуже швидко, тому там, де є якісь прогалини, швидко з’являються і освоюються нові підходи. Проблема з негнучкими метолодогіями в тому, що вони підходять для дуже обмеженого кола вимог: ті мають бути передбачувані, чітко окреслені ще перед початком роботи, з чітким дотриманням строків. Так, є програми, які розробляються роками і без змін (наприклад, програма для медичної реформи, припускаю, щось на зразок Helsi).


Всі інші вимагають більш гнучкого планування і оптимізації бізнес-процесів — Agile-маніфест якраз для цього. Часто команда використовує не тільки Scrum чи Kanban, а поєднує їх. Таким чином, у виграші всі: кожен член команди розуміє свою роль, бачить свій прогрес, а також прогрес колег завдяки мітам. Для замовника теж все прозоро: він також бачить, наскільки команда просунулась, а при необхідності вносить правки, на які швидко реагують.


Які проблеми він мав вирішити і чи це вдалося?
Agile вирішує проблеми повільності і дороговизни, властиві негнучким методологіям. Окрім того, у Waterfall і їй подібних методиках команда не заохочена до змін, якихось покращень і фідбеку. Наразі більшість IT-компаній так не працюють, так як цінять якраз залученість людей у процес, їх активність і відкритість до експерименів. Цінності Agile-маніфесту знаходять відгук у сучасних айтівців: люди та співпраця важливіші за процеси і документи, готовність до змін важливіша за дотримання плану тощо.


Я думаю, що поява Agile-маніфесту повністю виправдала себе. Звісно, негнучкі методології також важливі, а в деяких проектах незамінні, та все ж Agile — це великий шаг уперед в IT-галузі, який не втратить позицій ще багато років.




Mighty Beet


Як засновниця стартапу з мобільного застосунку для обміну світлинами, я би ризикнула і використала ітераційну [f]модель. Перевага в тому, що на початку роботи не потрібно мати чітких вимог та специфікацій до нього. Ми з командою створюємо якийсь базовий функціонал, який вже може працювати, і поступово доповнюємо його новими деталями. 


Ітераційна методика подобається тим, що з нею стартап можна доволі швидко вивести на ринок і привабити користувачів, потенційних інвесторів. Це не тільки швидше допоможе знайти фінансування, а також дасть розуміння настроїв юзерів (ці функції їм ок, а ці можна вдосконалити тощо).
[a]Для великих проектів скрам теж чудово підходить, бо дає можливість отримувати робочі шматки функціоналу регулірно і бачити прогрес.
[b]Kanban
[c]Регулярні мітинги - це особливість скраму.
[d]Тут уточню, що загальний дедлайн все одно присутній.
[e]По решті пунктів згодна з тобою.
[f]Хороший вибір, згодна з обраними аргументами.